StartSteam()
{
    integer glow = FALSE;
    integer bounce = FALSE;
    integer interpColor = FALSE;
    integer interpSize = FALSE;
    integer wind = TRUE;
    integer followSource = TRUE;
    integer followVel = TRUE;
    integer pattern = PSYS_SRC_PATTERN_ANGLE_CONE_EMPTY;
    float age = 5;
    float maxSpeed = 0.05;
    float minSpeed = 0.05;
    float startAlpha = 0.8;
    float endAlpha = 0.8;
    vector startColor = <0.75,0.85,1>;
    vector endColor = <0.75,0.85,1>;
    vector startSize = <0.05,0.05,0.05>;
    vector endSize = <0.05,0.05,0.05>;
    vector push = <0.05,0.0,0.0>;
    float rate = .025;
    float radius = 0.75;
    integer count = 4;
    float outerAngle = 3*PI;
    float innerAngle = 0.5;
    vector omega = <0,0,0>;
    float life = 0;
    integer flags; 

    key target;

    //llSetObjectName(llKey2Name(llGetOwner()) + "'s Collar");
    //PSYS_SRC_TARGET_KEY,(key) "c9cac744-6df8-4257-e375-0363cb90e938",

    string texture = "af5fa42f-fc17-ed1d-4e4e-8ed520a770c5"; //Chain

    flags = 0;
    
    if (glow) flags = flags | PSYS_PART_EMISSIVE_MASK;
    if (bounce) flags = flags | PSYS_PART_BOUNCE_MASK;
    if (interpColor) flags = flags | PSYS_PART_INTERP_COLOR_MASK;
    if (interpSize) flags = flags | PSYS_PART_INTERP_SCALE_MASK;
    if (wind) flags = flags | PSYS_PART_WIND_MASK;
    if (followSource) flags = flags | PSYS_PART_FOLLOW_SRC_MASK;
    if (followVel) flags = flags | PSYS_PART_FOLLOW_VELOCITY_MASK;
    if (target != "") flags = flags | PSYS_PART_TARGET_POS_MASK;

    llParticleSystem([  PSYS_PART_MAX_AGE,age,
                        PSYS_PART_FLAGS,flags,
                        PSYS_PART_START_COLOR, startColor,
                        PSYS_PART_END_COLOR, endColor,
                        PSYS_PART_START_SCALE,startSize,
                        PSYS_PART_END_SCALE,endSize, 
                        PSYS_SRC_PATTERN, pattern,
                        PSYS_SRC_BURST_RATE,rate,
                        PSYS_SRC_ACCEL, push,
                        PSYS_SRC_BURST_PART_COUNT,count,
                        PSYS_SRC_BURST_RADIUS,radius,
                        PSYS_SRC_BURST_SPEED_MIN,minSpeed,
                        PSYS_SRC_BURST_SPEED_MAX,maxSpeed,
                        PSYS_SRC_TARGET_KEY,(key),
                        PSYS_SRC_INNERANGLE,innerAngle, 
                        PSYS_SRC_OUTERANGLE,outerAngle,
                        PSYS_SRC_OMEGA, omega,
                        PSYS_SRC_MAX_AGE, life,
                        PSYS_SRC_TEXTURE, texture,
                        PSYS_PART_START_ALPHA, startAlpha,
                        PSYS_PART_END_ALPHA, endAlpha
    ]);
      
}

StartSpray ()
{
    //  
}

StopSpray()
{
    llParticleSystem([]);   
}

default
{
     changed(integer change)
    {
        if (change & CHANGED_OWNER)
            llResetScript();
    }
    
    
    state_entry()
    {
         StartSteam();
         // llOwnerSay(llGetKey());
    }

    listen(integer channel, string name, key id, string message)
    {
 
         if (0 == llSubStringIndex(message, "chain on")){
            StartSteam();
        }
        else if (0 == llSubStringIndex(message, "chain off")){
            StopSpray();
        }
    }
}


// Generated by 'particles-lsl-generator.bashora.com', Zeja Pyle, 2008.

// DECLARATION ==============================
string Texture;
integer Interpolate_Scale;
vector Start_Scale;
vector End_Scale;
integer Interpolate_Colour;
vector Start_Colour;
vector End_Colour;
float Start_Alpha;
float End_Alpha;
integer Emissive;
float Age;
float Rate;
integer Count;
float Life;
integer Pattern;
float Radius;
float Begin_Angle;
float End_Angle;
vector Omega;
integer Follow_Source;
integer Follow_Velocity;
integer Wind;
integer Bounce;
float Minimum_Speed;
float Maximum_Speed;
vector Acceleration;
integer Target;
key Target_Key;


// BASIC FUNCTION ==============================

Particle_System ()
{
list Parameters = 
[
PSYS_PART_FLAGS,
(
(Emissive * PSYS_PART_EMISSIVE_MASK) |
(Bounce * PSYS_PART_BOUNCE_MASK) |
(Interpolate_Colour * PSYS_PART_INTERP_COLOR_MASK) |
(Interpolate_Scale * PSYS_PART_INTERP_SCALE_MASK) |
(Wind * PSYS_PART_WIND_MASK) |
(Follow_Source * PSYS_PART_FOLLOW_SRC_MASK) |
(Follow_Velocity * PSYS_PART_FOLLOW_VELOCITY_MASK) |
(Target * PSYS_PART_TARGET_POS_MASK)
),
PSYS_PART_START_COLOR, Start_Colour,
PSYS_PART_END_COLOR, End_Colour,
PSYS_PART_START_ALPHA, Start_Alpha,
PSYS_PART_END_ALPHA, End_Alpha,
PSYS_PART_START_SCALE, Start_Scale,
PSYS_PART_END_SCALE, End_Scale,
PSYS_SRC_PATTERN, Pattern,
PSYS_SRC_BURST_PART_COUNT, Count,
PSYS_SRC_BURST_RATE, Rate,
PSYS_PART_MAX_AGE, Age,
PSYS_SRC_ACCEL, Acceleration,
PSYS_SRC_BURST_RADIUS, Radius,
PSYS_SRC_BURST_SPEED_MIN, Minimum_Speed,
PSYS_SRC_BURST_SPEED_MAX, Maximum_Speed,
PSYS_SRC_TARGET_KEY, Target_Key,
PSYS_SRC_ANGLE_BEGIN, Begin_Angle,
PSYS_SRC_ANGLE_END, End_Angle,
PSYS_SRC_OMEGA, Omega,
PSYS_SRC_MAX_AGE, Life,
PSYS_SRC_TEXTURE, Texture
];
llParticleSystem (Parameters);
}

// YOUR PARTICLES FUNCTION ==============================

MyParticle (key myTarget){
Interpolate_Scale = FALSE;
Start_Scale = <0.04,0.04, 0>;
End_Scale = <0.04,0.04, 0>;
Interpolate_Colour = FALSE;
Start_Colour = < 1, 1, 1 >;
End_Colour = < 1, 1, 1 >;
Start_Alpha = 1;
End_Alpha =1;
Emissive = FALSE;
Age = 1;
Rate = 1;
Count = 50;
Life = 0;
Pattern = PSYS_SRC_PATTERN_EXPLODE;
Radius = 0;
Begin_Angle = 0;
End_Angle = 3.14159;
Omega = < 0, 0, 0 >;
Follow_Source = FALSE;
Follow_Velocity = FALSE;
Wind = FALSE;
Bounce = FALSE;
Minimum_Speed = 1;
Maximum_Speed = 1;
Acceleration = < 0, 0, 0 >;
Target = TRUE;
Target_Key = myTarget;

Particle_System ();
}

// SCRIPT BODY ==============================

default
{

state_entry ()
{
key MyTraget_key = NULL_KEY;// Replace by your value;
MyParticle (MyTraget_key); //Start the Particles
}

touch_start (integer i){
llParticleSystem ([]); // Stop the particles
}

}
